name: "Unity Build"
description: "Builds Unity app for every selected target platform. Works on macOS runners only."

inputs:
  target_platforms:
    description: "Target platforms you want to build for. Pass as string with '|' separator. All supported platforms: 'macOS|Windows|iOS|Android|Linux|WebGL|AppleTV'"
    required: true
  changeset:
    description: "Changeset of the version you want to use for build. You can find it in change notes."
    required: true
  version:
    description: "Version of the Unity editor you want to use for your build."
    required: true
  serial:
    description: "Serail number for Unity activation."
    required: true
  username:
    description: "Username for Unity activation."
    required: true
  password:
    description: "Password for Unity activation."
    required: true
  project_path:
    description: "Path where your project can be found."
    required: false
    default: './'
  build_script:
    description: "Special editor script that will be used to build your app."
    required: true

runs:
  using: "composite"
  steps:
    - name: Check platform
      run: |
        if [ "$RUNNER_OS" != "macOS" ]; then
          echo "$RUNNER_OS not supported"
          exit 1
        fi
      shell: bash

    - name: Check target platforms
      id: check-target-platforms
      run: |
        supported_platforms=('macOS' 'Windows' 'iOS' 'Android' 'Linux' 'WebGL' 'AppleTV')
        IFS='|' read -ra platforms <<< echo ${{ inputs.target_plarforms }}
        for i in "${ platforms[@] }"
        do
          k=0
          for j in "${ supported_platforms[@] }"
          do
            if [[ $i == $j ]]; then
              echo "::set-output name=${ i,, }::'true'"
              k=1
            fi
          done
          if [[ k == 0 ]]; then
            echo "$i not supported"
            exit 1
          fi
        done
        for i in "${ supported_platforms[@] }"
        do
          if [[ !${ platforms[*] } =~ $i ]]; then
            echo "::set-output name=${ i,, }::'false'"
          fi
        done
      shell: bash

    - name: Cache Unity editor installer
      id: cache-unity-editor
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity.pkg
        key: unity-editor

    - name: Cache Unity Windows installer
      if: steps.check-target-platforms.outputs.windows == 'true'
      id: cache-unity-windows
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-Windows.pkg
        key: unity-windows

    - name: Cache Unity iOS installer
      if: steps.check-target-platforms.outputs.ios == 'true'
      id: cache-unity-ios
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-iOS.pkg
        key: unity-ios

    - name: Cache Unity Android installer
      if: steps.check-target-platforms.outputs.android == 'true'
      id: cache-unity-android
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-Adroid.pkg
        key: unity-android

    - name: Cache Unity Linux installer
      if: steps.check-target-platforms.outputs.linux == 'true'
      id: cache-unity-linux
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-Linux.pkg
        key: unity-linux

    - name: Cache Unity WebGL installer
      if: steps.check-target-platforms.outputs.webgl == 'true'
      id: cache-unity-webgl
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-WebGL.pkg
        key: unity-webgl

    - name: Cache Unity AppleTV installer
      if: steps.check-target-platforms.outputs.appletv == 'true'
      id: cache-unity-appletv
      uses: actions/cache@v2
      with:
        path: /Downloads/Unity-AppleTV.pkg
        key: unity-appletv
      
    - name: Getting target platforms
      run: ${{ github.action_path }}/install.sh ${{ inputs.target_platforms }} ${{ inputs.changeset }} ${{ inputs.version }}
      shell: bash
      env:
        EDITOR_CACHE: steps.cache-unity-editor.outputs.cache-hit
        WINDOWS_CACHE: steps.cache-unity-windows.outputs.cache-hit
        IOS_CACHE: steps.cache-unity-ios.outputs.cache-hit
        ANDROID_CACHE: steps.cache-unity-android.outputs.cache-hit
        LINUX_CACHE: steps.cache-unity-linux.outputs.cache-hit
        WEBGL_CACHE: steps.cache-unity-webgl.outputs.cache-hit
        APPLETV_CACHE: steps.cache-unity-appletv.outputs.cache-hit

    - name: Build app
      run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -nographics -quit -batchmode -logfile -projectPath ${{ inputs.project_path }} -executeMethod ${{ inputs.build_script }} -username '${{ inputs.username }}' -password '${{ inputs.password }}' -serial ${{ inputs.serial }} -silent-crashes

    - name: Revoke license
      if: always()
      run: sudo /Applications/Unity/Unity.app/Contents/MacOS/Unity -nographics -quit -batchmode -logfile -returnlicense -username '${{ inputs.username }}' -password '${{ inputs.password }}'
